// Code generated by MockGen. DO NOT EDIT.
// Source: bf2.go

// Package bf2 is a generated GoMock package.
package bf2

import (
	reflect "reflect"

	config "github.com/cetteup/conman/pkg/config"
	handler "github.com/cetteup/conman/pkg/handler"
	gomock "github.com/golang/mock/gomock"
)

// MockconfigHandler is a mock of configHandler interface.
type MockconfigHandler struct {
	ctrl     *gomock.Controller
	recorder *MockconfigHandlerMockRecorder
}

// MockconfigHandlerMockRecorder is the mock recorder for MockconfigHandler.
type MockconfigHandlerMockRecorder struct {
	mock *MockconfigHandler
}

// NewMockconfigHandler creates a new mock instance.
func NewMockconfigHandler(ctrl *gomock.Controller) *MockconfigHandler {
	mock := &MockconfigHandler{ctrl: ctrl}
	mock.recorder = &MockconfigHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconfigHandler) EXPECT() *MockconfigHandlerMockRecorder {
	return m.recorder
}

// ReadGlobalConfig mocks base method.
func (m *MockconfigHandler) ReadGlobalConfig(game handler.Game) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGlobalConfig", game)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGlobalConfig indicates an expected call of ReadGlobalConfig.
func (mr *MockconfigHandlerMockRecorder) ReadGlobalConfig(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGlobalConfig", reflect.TypeOf((*MockconfigHandler)(nil).ReadGlobalConfig), game)
}

// ReadProfileConfig mocks base method.
func (m *MockconfigHandler) ReadProfileConfig(game handler.Game, profile string) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProfileConfig", game, profile)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProfileConfig indicates an expected call of ReadProfileConfig.
func (mr *MockconfigHandlerMockRecorder) ReadProfileConfig(game, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProfileConfig", reflect.TypeOf((*MockconfigHandler)(nil).ReadProfileConfig), game, profile)
}
